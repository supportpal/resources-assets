!function (t, e) {
  "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).MergeFields = {});
}(this, function (t) {
  "use strict";

  /*! @source https://gist.github.com/1129031 */
  function e() {
    var t = e.prototype,
      n = t.parseFromString;
    try {
      if (new e().parseFromString("", "text/html")) return;
    } catch (t) {}
    t.parseFromString = function (t, e) {
      if (/^\s*text\/html\s*(?:;|$)/i.test(e)) {
        var a = document.implementation.createHTMLDocument("");
        return t.toLowerCase().indexOf("<!doctype") > -1 ? a.documentElement.innerHTML = t : a.body.innerHTML = t, a;
      }
      return n.apply(this, arguments);
    };
  }
  function n(t) {
    var n,
      a,
      r,
      s,
      o = this,
      i = t.valFn,
      d = {
        img: ["src"],
        a: ["href"]
      };
    this.callback = function (t) {
      !function (t) {
        /\{\{\s*operator\.reply_template(\|raw)?\s*}}/.test(t) ? n.find(".twig-sig-warning").length || n.append($("<div>", {
          class: "sp-alert sp-alert-warning sp-mt-3 sp-mb-0 twig-sig-warning",
          text: Lang.get("core.twig_operator_reply_template")
        })) : n.find(".twig-sig-warning").remove();
      }(t), !function (t) {
        for (var n = new e().parseFromString(t, "text/html").getElementsByTagName("*"), a = n.length; a--;) {
          var r = n[a];
          if (d.hasOwnProperty(r.tagName.toLowerCase())) for (var s = d[r.tagName.toLowerCase()], o = s.length; o--;) r.hasAttribute(s[o]) && r.removeAttribute(s[o]);
          var i = r.innerHTML ? r.outerHTML.slice(0, r.outerHTML.indexOf(r.innerHTML)) : r.outerHTML;
          if (/<[^{>]*(\{\{(?:[^}]+|}(?!}))*}}|\{%(?:[^%]+|%(?!}))*%})[^>]*>/gi.test(i)) return !0;
        }
        return !1;
      }(t) ? n.find(".twig-html-warning").remove() : n.find(".twig-html-warning").length || n.append($("<div>", {
        class: "sp-alert sp-alert-warning sp-mt-3 sp-mb-0 twig-html-warning",
        text: Lang.get("core.twig_html_warning")
      }));
    }, this.showPreview = function () {
      var e = function (t) {
        a.find("button:visible").prop("disabled", !1).trigger("click"), Swal.fire(Lang.get("messages.error"), t || Lang.get("messages.general_error"), "error");
      };
      a.find("button.switch-view").prop("disabled", !0), r.html("").css(s.position()).css("width", s.outerWidth(!0)).css("height", s.outerHeight(!0)).addClass("loadinggif").show();
      var o = n.parents("form").find(':input[name="brand_id"]').length ? n.parents("form").find(':input[name="brand_id"]').val() : n.parents(".sp-form-row").data("brand"),
        d = n.parents("form").find(':input[name="ticket_id"]').length ? n.parents("form").find(':input[name="ticket_id"]').val() : null,
        u = n.parents(".sp-form-container").find(':input[name$="[language]"]').length ? n.parents(".sp-form-container").find(':input[name$="[language]"]').val() : Lang.locale();
      $.post(laroute.route("core.operator.emailtemplate.preview"), {
        template: i(),
        locale: u,
        template_id: n.parents("form").data("templateId"),
        brand_id: o,
        ticket_id: d,
        is_email: t.syntaxEmailTemplate ? 1 : 0
      }).done(function (t) {
        void 0 !== t.data ? r.html(t.data) : e();
      }).fail(function (t, n, a) {
        try {
          var r = JSON.parse(t.responseText);
          e(void 0 !== r.message ? r.message : a);
        } catch (t) {
          e(a);
        }
      }).always(function () {
        a.find("button.switch-view").prop("disabled", !1), r.removeClass("loadinggif");
      });
    }, this.showEditor = function () {
      r.hide();
    }, this.container = function () {
      return n;
    }, this.init = function (t) {
      s = t.after('<div class="sp-editor-container"></div>'), n = s.next(".sp-editor-container"), r = $('<div class="sp-editor-preview sp-editor-content"></div>').hide(), n.append(r), a = $('<div class="sp-inline-block sp-mt-3"><button class="switch-view visual-preview" type="button">' + Lang.get("general.preview") + '</button><button class="switch-view code-editor sp-hidden" type="button">' + Lang.get("general.editor") + "</button></div>").on("click", "button", function (t) {
        t.preventDefault(), $(this).hasClass("visual-preview") ? o.showPreview() : o.showEditor(), n.find(".switch-view").toggle();
      }), n.append(a);
    };
  }
  n.translations = {
    merge_fields: Lang.get("operator.merge_fields"),
    merge_fields_desc: Lang.get("operator.merge_fields_desc")
  }, n.icon = '<svg height="24" width="24"><path d="M 6.098 7.104 C 6.298 8.404 6.498 8.704 6.498 10.004 C 6.498 10.804 4.998 11.504 4.998 11.504 L 4.998 12.504 C 4.998 12.504 6.498 13.204 6.498 14.004 C 6.498 15.304 6.298 15.604 6.098 16.904 C 5.798 19.004 6.898 20.004 7.898 20.004 C 8.898 20.004 9.998 20.004 9.998 20.004 L 9.998 18.004 C 9.998 18.004 8.198 18.204 8.198 17.004 C 8.198 16.104 8.398 16.104 8.598 14.104 C 8.698 13.204 8.098 12.504 7.498 12.004 C 8.098 11.504 8.698 10.904 8.598 10.004 C 8.298 8.004 8.198 8.004 8.198 7.104 C 8.198 5.904 9.998 6.004 9.998 6.004 L 9.998 4.004 C 9.998 4.004 8.998 4.004 7.898 4.004 C 6.798 4.004 5.798 5.004 6.098 7.104 Z"></path><path d="M 17.898 7.104 C 17.698 8.404 17.498 8.704 17.498 10.004 C 17.498 10.804 18.998 11.504 18.998 11.504 L 18.998 12.504 C 18.998 12.504 17.498 13.204 17.498 14.004 C 17.498 15.304 17.698 15.604 17.898 16.904 C 18.198 19.004 17.098 20.004 16.098 20.004 C 15.098 20.004 13.998 20.004 13.998 20.004 L 13.998 18.004 C 13.998 18.004 15.798 18.204 15.798 17.004 C 15.798 16.104 15.598 16.104 15.398 14.104 C 15.298 13.204 15.898 12.504 16.498 12.004 C 15.898 11.504 15.298 10.904 15.398 10.004 C 15.598 8.004 15.798 8.004 15.798 7.104 C 15.798 5.904 13.998 6.004 13.998 6.004 L 13.998 4.004 C 13.998 4.004 14.998 4.004 16.098 4.004 C 17.198 4.004 18.198 5.004 17.898 7.104 Z"></path></svg>', n.modalContent = '<section>                         <span class="sp-description">' + n.translations.merge_fields_desc + '</span>                         <br /><br />                         <div class="sp-merge-fields sp-flex sp-flex-wrap">                         </div>                       </section>', n.ticketTemplate = function (t) {
    return t = t || !0, String() + '<div class="sp-w-full lg:sp-w-1/2"><strong class="sp-text-xl">' + Lang.choice("ticket.ticket", 2) + "</strong><table><tr><td><strong>" + Lang.get("operator.strings") + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.id }}">' + Lang.get("general.id") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.number }}">' + Lang.get("general.number") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.token }}">' + Lang.get("core.token") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.subject }}">' + Lang.get("ticket.subject") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ formatDate(ticket.due_time) }}">' + Lang.get("ticket.due_time") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ formatDate(ticket.created_at) }}">' + Lang.get("ticket.created_time") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ formatDate(ticket.updated_at) }}">' + Lang.get("ticket.last_action") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.lastReply.purified_text|raw }}">' + Lang.get("ticket.last_message_text") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.frontend_url }}">' + Lang.get("operator.frontend_url") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.operator_url }}">' + Lang.get("operator.operator_url") + "</button></td></tr><tr><td><strong>" + Lang.choice("ticket.department", 1) + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.department.id }}">' + Lang.get("general.id") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.department.frontend_name }}">' + Lang.get("general.name") + "</button></td></tr><tr><td><strong>" + Lang.choice("general.status", 1) + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.status.id }}">' + Lang.get("general.id") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.status.name }}">' + Lang.get("general.name") + "</button></td></tr><tr><td><strong>" + Lang.choice("ticket.priority", 1) + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.priority.id }}">' + Lang.get("general.id") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.priority.name }}">' + Lang.get("general.name") + "</button></td></tr><tr><td><strong>" + Lang.choice("ticket.sla_plan", 1) + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ ticket.slaplan.name }}">' + Lang.get("general.name") + "</button></td></tr><tr><td><strong>" + Lang.get("operator.collections") + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{% for tag in ticket.tags %}{{ tag.name }}{% endfor %}">' + Lang.choice("ticket.tag", 2) + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{% for user in ticket.assigned %}{{ user.formatted_name }}{% endfor %}">' + Lang.get("ticket.assigned_operator") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{% for field in ticket.customfields %}{{ field.id }}{% endfor %}">' + Lang.choice("customfield.customfield", 2) + "</button></td></tr>" + (t ? '<tr><td><br /></td></tr><tr><td><strong class="sp-text-xl">' + Lang.choice("ticket.cannedresponse", 2) + '</strong></td></tr><tr><td><span class="sp-description">' + Lang.get("operator.merge_field_canned_desc") + "</span></td></tr>" : "") + "</table></div>";
  }, n.userAndSystemTemplate = function (t) {
    return String() + '<div class="sp-w-full sp-mt-6 lg:sp-w-1/2 lg:sp-mt-0"><strong class="sp-text-xl">' + Lang.choice("user.user", 2) + "</strong><table><tr><td><strong>" + Lang.get("operator.strings") + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.id }}">' + Lang.get("general.id") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.formatted_name }}">' + Lang.get("user.formatted_name") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.firstname }}">' + Lang.get("user.firstname") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.lastname }}">' + Lang.get("user.lastname") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.email }}">' + Lang.get("general.email") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.email_verified }}">' + Lang.get("user.verified") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.active }}">' + Lang.get("user.account_active") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.country }}">' + Lang.get("user.country") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.language_code }}">' + Lang.choice("general.language", 1) + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ formatDate(user.created_at) }}">' + Lang.get("ticket.created_time") + "</button></td></tr>" + (t ? "<tr><td><strong>" + Lang.choice("user.organisation", 1) + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ user.organisation.name }}">' + Lang.get("general.name") + "</button></td></tr>" : "") + "<tr><td><strong>" + Lang.get("operator.collections") + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{% for group in user.groups %}{{ group.name }}{% endfor %}">' + Lang.choice("user.group", 2) + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{% for field in ticket.customfields %}{{ field.id }}{% endfor %}">' + Lang.choice("customfield.customfield", 2) + '</button></td></tr><tr><td><br /><strong class="sp-text-xl">' + Lang.choice("core.brand", 1) + "</strong></td></tr><tr><td><strong>" + Lang.get("operator.strings") + '</strong></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ brand.name }}">' + Lang.get("core.brand_name") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ brand.default_email }}">' + Lang.get("general.email_address") + '</button></td></tr><tr><td><button type="button" class="sp-button-sm" data-mf="{{ brand.frontend_url }}">' + Lang.get("operator.frontend_url") + "</button></td></tr></table></div>";
  }, n.appendTo = function (t, e, a, r) {
    return t.find(".sp-merge-fields").append(e ? n.ticketTemplate(a) : "").append(n.userAndSystemTemplate(r)).find("button").on("click", function () {
      $(this).trigger("mergefield:inserted", {
        value: $(this).data("mf")
      });
    });
  }, t.MergeFields = n;
});